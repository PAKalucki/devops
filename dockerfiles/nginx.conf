
events {
  worker_connections 1024;
}

http {

  # In case of big files
  client_max_body_size 200M;

  server {
      listen 80;
      return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl;

    ssl_certificate_key /etc/ssl/private/nginx.key;
    ssl_certificate     /etc/ssl/private/nginx.crt;

    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    add_header Strict-Transport-Security max-age=31536000;

    location /transmission {
      resolver 127.0.0.11 valid=30s; # Docker DNS resolver
      set $upstream_t transmission;
      proxy_pass http://$upstream_t:9091;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # HTTP 1.1 support
      proxy_http_version 1.1;
      proxy_set_header Connection "";
    }
  }
}